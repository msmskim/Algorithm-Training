# Intro
'Hello Coding 그림으로 개념을 이해하는 알고리즘, 김도형, 한빛미디어'의 Chapter3 재귀를 정리한 글입니다.

# 재귀
 자물쇠를 풀기 위해서 상자 안에서 열쇠를 찾는다고 가정해봅시다. 상자 안에는 작은 상자들이 있고, 그 작은 상자 안에는 더 작은 상자들이 있습니다.
열쇠를 찾기 위한 알고리즘은 무엇일까요?

# 방법1
1. 내부를 확인할 상자를 쌓아놓는다
2. 상자를 하나 집어서 내부를 살핀다.
3. 만약 안에 상자가 있다면 꺼내어 나중에 확인할 상자 더미에 놓는다.
4. 만약 열쇠가 있으면 작업 종료!
5. 반복한다.

이 방법은 while을 사용
def look_for_key(main_box):
  pile = main_box.make_a_pile_look_through()
  while pile is not empty:
    box = pile.grab_a_box()
    for item in box:
      if item.is_a_box():
        pile.append(item)
      elif item.is_a_key():
        print "열쇠를 찾았어요!"
        
# 방법2
1. 상자 안을 확인한다.
2. 만약 상자를 발견하면 1단계로 간다.
3. 만약 열쇠를 발견하면 작업 종료!

이 방법은 재귀를 사용
def look_for_key(box):
  for item in box:
    if item.is_a_box():
      look_for_key(item)
    elif item.is_a_key():
      print "열쇠를 찾았어요!"

재귀를 쓴다고 성능이 더 나아지지는 않으나, 대부분의 중요한 알고리즘들이 재귀를 사용하므로 개념을 이해하는 것이 중요!

# 기본단계와 재귀단계
 재귀를 사용할 경우 언제 멈출지 알려줘야 함, 재귀 단계는 함수가 자기자신을 호출하는 부분, 기본 단계는 함수가 자기 자신을 다시 호출하지 않는 경우
def countdown(i)
  print i
  # 기본 단계
  if i <= 1:
    return
  # 재귀 단계
  else:
    countdown(i-1)
    
# 스택
 호출 스택은 재귀를 사용할 때 더욱 중요 
 
항목을 읽을 때, 가장 위에 새 항목을 추가하는 푸시와 가장 위의 항목을 떼어내고 읽는 팝이 있음

할 일 목록을 작성하는 법은
1. 스택에서 할 일을 팝한다
2. 할 일은 "음식 준비"이다. 빵과 햄버거를 준비하고 케이트를 구워야 한다.
3. 이 일들을 메모지에 적어 다시 스택에 푸시한다.

호출 스택의 경우 메모리를 사용, 스택이 너무 커지면 컴퓨터가 과다한 함수 호출 정보를 저장하고 있다는 뜻, 이 경우 두가지 방법이 있다.
1. 재귀 대신 반복문 사용
2. 꼬리 재귀라는 방법 사용

# 출처
'Hello Coding 그림으로 개념을 이해하는 알고리즘, 김도형, 한빛미디어'
