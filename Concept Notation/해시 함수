# Intro
'Hello Coding, 그림으로 개념을 이해하는 알고리즘, 김도형, 한빛미디어'의 Chapter 5를 정리한 글입니다.

# 해시 함수
1. 문자열을 받아서 숫자를 반환
2. 일관성이 있어야 하고, 다른 단어가 들어가면 다른 숫자가 나와야 함
3. 해시 함수는 값이 저장된 위치를 정확하게 알려줌
4. 같은 이름에 대해서는 항상 같은 인덱스를 할당, 다른 문자열에 대해서는 다른 인덱스를 할당, 해시 함수는 배열의 크기를 알고, 유효한 인덱스만
반환해야 함
5. 파이썬에는 '딕셔너리'라고 하는 해시 테이블이 존재함

# 중복된 항목 방지하기
voted = {}
def check_voter(name):
  if voted.get(name):
    print ("돌려 보내세요!")
  else:
    voted[name] = True
    print("투표하게 하세요")
    
# 해시 테이블을 캐시로 사용하기
1. 홈페이지는 어떤 정보를 외워서 내보냄(캐싱)
cache ={}
def get_page(url):
  if cache.get(url):
    return cache[url]
  else:
    data = get_data_from_server(url)
    cache[url] = data
    return data
# 해시 테이블의 장점
1. 어떤 것과 다른 것 사이의 관계를 모형화
2. 중복 방지
3. 서버에게 작업시키지 않고 자료를 캐싱

# 충돌
1. 해시테이블에서 연결 리스트가 형성됨
2. 이상적으로 해시 함수는 키를 해시 테이블 전체에 고르게 할당해야 함
3. 만약 연결 리스트가 길어지면 해시 테이블의 속도도 느려짐, 하지만 좋은 해시 함수가 있다면 그런일은 발생하지 않음

# 성능
1. 충돌을 피하기 위해서는 낮은 사용률과 좋은 해시 함수 필요

# 해시 테이블의 사용률
1. 해시 테이블에 있는 항목의 수 / 해시 테이블에 있는 공간의 수
2. 보통 사용률이 0.7보다 커지면 리사이징, 리사이징을 자주 하는 것은 좋지 않음

# 좋은 해시 함수
1. 배열에 값을 고루 분포시키는 함수

# 출처
'Hello Coding, 그림으로 개념을 이해하는 알고리즘, 김도형, 한빛미디어'
